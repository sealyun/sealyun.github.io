(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{360:function(_,e,s){"use strict";s.r(e);var a=s(24),t=Object(a.a)({},(function(){var _=this,e=_.$createElement,s=_._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h1",{attrs:{id:"设计原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计原理"}},[_._v("#")]),_._v(" 设计原理")]),_._v(" "),s("h2",{attrs:{id:"执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行流程"}},[_._v("#")]),_._v(" 执行流程")]),_._v(" "),s("ul",[s("li",[_._v("在执行机器上生成证书和kubeconfig文件")]),_._v(" "),s("li",[_._v("在执行机器上wget下载离线包和sealos二进制使用scp拷贝到目标机器上（masters和nodes）")]),_._v(" "),s("li",[_._v("在master0上执行kubeadm init")]),_._v(" "),s("li",[_._v("在其它master上执行kubeadm join 并设置控制面，这个过程会在其它master上起etcd并与master0的etcd组成集群，并启动控制组建（apiserver controller等）")]),_._v(" "),s("li",[_._v("join node节点，会在node上配置ipvs规则，配置/etc/hosts等")])]),_._v(" "),s("p",[_._v("有个细节是所有对apiserver进行访问都是通过域名，因为master上连接自己就行，node需要通过虚拟ip链接多个master，这个每个节点的kubelet与kube-proxy访问apiserver的地址是不一样的，而kubeadm又只能在配置文件中指定一个地址，所以使用一个域名但是每个节点解析不同。")]),_._v(" "),s("p",[_._v("使用域名的好处还有就是IP地址发生变化时仅需要修改解析即可。")]),_._v(" "),s("h2",{attrs:{id:"本地内核负载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地内核负载"}},[_._v("#")]),_._v(" 本地内核负载")]),_._v(" "),s("p",[_._v("通过这样的方式实现每个node上通过本地内核负载均衡访问masters：")]),_._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[_._v("  +----------+                       +---------------+  virturl server: 127.0.0.1:6443\n  | mater0   |<----------------------| ipvs nodes    |    real servers:\n  +----------+                      |+---------------+            10.103.97.200:6443\n                                    |                             10.103.97.201:6443\n  +----------+                      |                             10.103.97.202:6443\n  | mater1   |<---------------------+\n  +----------+                      |\n                                    |\n  +----------+                      |\n  | mater2   |<---------------------+\n  +----------+\n")])])]),s("p",[_._v("在node上起了一个lvscare的static pod去守护这个 ipvs, 一旦apiserver不可访问了，会自动清理掉所有node上对应的ipvs规则， master恢复正常时添加回来。")]),_._v(" "),s("p",[_._v("所以在你的node上加了三个东西，可以直观的看到：")]),_._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[_._v("cat")]),_._v(" /etc/kubernetes/manifests   "),s("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 这下面增加了lvscare的static pod")]),_._v("\nipvsadm -Ln                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 可以看到创建的ipvs规则")]),_._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[_._v("cat")]),_._v(" /etc/hosts                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# 增加了虚拟IP的地址解析")]),_._v("\n")])])]),s("p",[s("strong",[_._v("sealos已经把lvscare本地负载和百年证书已经在sealos中支持，使用起来极其方便！！！")])]),_._v(" "),s("h2",{attrs:{id:"离线包结构分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#离线包结构分析"}},[_._v("#")]),_._v(" 离线包结构分析")]),_._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[_._v(".\n|____docker # docker的离线包\n| |____docker.tgz\n| |____README.md\n|____bin # 指定版本的bin文件\n| |____conntrack\n| |____kubeadm\n| |____kubelet\n| |____sealos\n| |____kubelet-pre-start.sh\n| |____kubectl\n| |____crictl\n|____images # kubernetes的离线镜像\n| |____images.tar\n| |____README.md\n|____shell # 离线包的部署脚本,sealos会自动调用\n| |____master.sh\n| |____init.sh\n| |____docker.sh\n|____README.md\n|____conf\n| |____net   # 高版本的sealos已经集成\n| | |____calico.yaml\n| |____10-kubeadm.conf # kubeadm的配置文件\n| |____calico.yaml\n| |____kubeadm.yaml\n| |____kubelet.service\n| |____docker.servic\n")])])]),s("p",[_._v("init.sh脚本中拷贝bin文件到$PATH下面，配置systemd，关闭swap防火墙等，然后导入集群所需要的镜像。")]),_._v(" "),s("p",[_._v("master.sh主要执行了kubeadm init")]),_._v(" "),s("p",[_._v("conf下面有有我需要的如kubeadm的配置文件，calico yaml文件等等")]),_._v(" "),s("p",[_._v("sealos会调用二者。 所以大部分兼容不同版本都可以微调脚本做到。")])])}),[],!1,null,null,null);e.default=t.exports}}]);